import { Axios, AxiosPromise } from "axios";
import { Entity, EntitySet, Executable, Queryable } from "../interfaces";
export declare class Query implements EntitySet, Entity, Queryable, Executable {
    private url;
    private axios;
    private parameters;
    constructor(axios: Axios);
    top(rowNumber: number): Queryable;
    skip(rowNumber: number): Queryable;
    paginate(page: number, rows: number): Executable;
    property(key: string): Entity;
    /**
     * Retrieves a single entity
     * @param entity entity to inspect
     * @param id id of the entity to retrieve
     * @returns Entity interface
     */
    entity(entity: string, id: number | string): Entity;
    /**
     *
     * Retrieves a collection of entities
     *
     * @param resource resource to query
     * @returns EntitySet
     */
    entities(resource: string): EntitySet;
    /**
     * Applies a filter to the query.
     * All the concatenated filters are in AND
     * @param filterquery filter to apply
     * @returns
     */
    filter(filterquery: string): Queryable;
    select(fields: string | string[]): Queryable;
    count(): Executable;
    execute(): Promise<AxiosPromise>;
    value(): Executable;
    getURL(): string;
}
//# sourceMappingURL=query.d.ts.map