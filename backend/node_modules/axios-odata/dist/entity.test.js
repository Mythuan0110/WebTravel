"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __importDefault(require("."));
const URL = require("url");
const axios = require("axios");
describe("url generation", () => {
    let client;
    beforeAll(() => {
        const http = axios.create({
            baseURL: "https://services.odata.org/TripPinRESTierService/(S(dnx33crwjgtxair2gvwwxbnu))/",
        });
        client = new _1.default(http);
    });
    test("Requesting EntitySet", () => {
        let url = client.query().entities("People").getURL();
        expect(url).toBe("/People");
    });
    test("Requesting EntitySet", () => {
        let url = client.query().entity("People", "russellwhyte").getURL();
        expect(url).toBe("/People('russellwhyte')");
    });
    test("Requesting complex property", () => {
        let url = client
            .query()
            .entity("Airports", "KSFO")
            .property("Location")
            .getURL();
        expect(url).toBe("/Airports('KSFO')/Location");
    });
    test("Requesting collection of complex property", () => {
        let url = client
            .query()
            .entity("People", "russellwhyte")
            .entities("AddressInfo")
            .getURL();
        expect(url).toBe("/People('russellwhyte')/AddressInfo");
    });
    test("Requesting a Single Primitive Property Raw Value", () => {
        let url = client
            .query()
            .entity("Airports", "KSFO")
            .property("Name")
            .value()
            .getURL();
        expect(url).toBe("/Airports('KSFO')/Name/$value");
    });
    test("Requesting a Enum Type Property Raw Value", () => {
        let url = client
            .query()
            .entity("People", "russellwhyte")
            .property("Gender")
            .value()
            .getURL();
        expect(url).toBe("/People('russellwhyte')/Gender/$value");
    });
});
describe("query data", () => {
    let client;
    beforeAll(() => {
        const http = axios.create({
            baseURL: "https://services.odata.org/TripPinRESTierService/(S(dnx33crwjgtxair2gvwwxbnu))/",
        });
        client = new _1.default(http);
    });
    test("System Query Option $filter", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            let url = yield client
                .query()
                .entities("People")
                .filter("FirstName eq 'Scott'")
                .execute();
            expect(url.request.path).toBe("/TripPinRESTierService/(S(dnx33crwjgtxair2gvwwxbnu))/People?$filter=FirstName+eq+'Scott'");
        }
        catch (ex) {
            throw ex;
        }
    }));
    test("Filter on Complex Type Property", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            let url = yield client
                .query()
                .entities("Airports")
                .filter("contains(Location/Address, 'San Francisco')")
                .execute();
            expect(url.request.path).toBe("/TripPinRESTierService/(S(dnx33crwjgtxair2gvwwxbnu))/Airports?$filter=contains(Location%2FAddress,+'San+Francisco')");
        }
        catch (ex) {
            throw ex;
        }
    }));
    test("Filter on Collection - String", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            let url = yield client
                .query()
                .entities("Airports")
                .select("Name, IcaoCode")
                .execute();
            expect(url.request.path).toBe("/TripPinRESTierService/(S(dnx33crwjgtxair2gvwwxbnu))/Airports?$select=Name,+IcaoCode");
        }
        catch (ex) {
            throw ex;
        }
    }));
    test("Filter on Collection - Array", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            let url = yield client
                .query()
                .entities("Airports")
                .select(["Name", "IcaoCode"])
                .execute();
            expect(url.request.path).toBe("/TripPinRESTierService/(S(dnx33crwjgtxair2gvwwxbnu))/Airports?$select=Name,+IcaoCode");
        }
        catch (ex) {
            console.log(ex);
            throw ex;
        }
    }));
    test("Filter on Collection - Paginate", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            let url = yield client
                .query()
                .entities("People")
                .paginate(2, 10)
                .execute();
            expect(url.request.path).toBe("/TripPinRESTierService/(S(dnx33crwjgtxair2gvwwxbnu))/People?$top=10&$skip=10");
        }
        catch (ex) {
            console.log(ex);
            throw ex;
        }
    }));
    test("System Query Option $count", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            let url = yield client.query().entities("People").count().execute();
            expect(url.request.path).toBe("/TripPinRESTierService/(S(dnx33crwjgtxair2gvwwxbnu))/People/$count");
        }
        catch (ex) {
            console.log(ex);
            throw ex;
        }
    }));
    /*
    test("Filter on Enum Properties", async () => {
      try {
        let url = await client
          .query()
          .entities("People")
          .filter(
            "Gender eq Microsoft.OData.Service.Sample.TrippinInMemory.Models.PersonGender'Female'"
          )
          .execute();
  
        expect(url.request.path).toBe(
          "/TripPinRESTierService/(S(dnx33crwjgtxair2gvwwxbnu))/People?$filter=Gender+eq+Microsoft.OData.Service.Sample.TrippinInMemory.Models.PersonGender'Female'"
        );
      } catch (ex: any) {
        throw ex;
      }
    });
  */
});
//# sourceMappingURL=entity.test.js.map